structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN | UMINUS
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  exp           of A.exp
        | program       of A.exp
        | lValue        of A.var
        | seqExp        of A.exp
        | callExp       of A.exp
        | infixExp      of A.exp
        | arrCreate     of A.exp
        | recCreate     of A.exp
        | assignment    of A.exp
        | ifThenElse    of A.exp
        | ifThen        of A.exp
        | whileExp      of A.exp
        | forExp        of A.exp
        | letExp        of A.exp
        | paramList                     of A.exp list
        | paramListOpt                  of A.exp list
        | fieldCreateOpt        of (Symbol.symbol * A.exp * A.pos) list
        | fieldCreateList       of (Symbol.symbol * A.exp * A.pos) list
        | expList                       of (A.exp * A.pos) list
        | expListOpt                    of (A.exp * A.pos) list
        | decList               of A.dec list
        | subscript                     of A.var
        | fieldExp                      of A.var
        | typedec       of A.dec
        | typ                           of A.ty
        | typef                 of A.field list
        | typeflist             of A.field list
        | fundec        of A.dec
        | vardec        of A.dec 
        | dec           of A.dec
        | inter                 of A.var

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL


%nonassoc THEN
%nonassoc OF DO ELSE 
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ GE GT LE LT
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp           (exp)

(* can exp produce empty? *)
exp:
        lValue          (lValue)
        | NIL           (A.NilExp)
        | INT           (A.IntExp INT)
        | STRING        (A.StringExp (STRING, STRINGleft))
        | seqExp        (seqExp)
        | MINUS exp    %prec UMINUS     (A.OpExp {left=A.IntExp 0, oper=A.MinusOp, right=exp, pos=MINUSleft})
        | callExp       (callExp)
        | infixExp      (infixExp)
        | arrCreate     (arrCreate)
        | recCreate     (recCreate)
        | assignment    (assignment)
        | ifThenElse    (ifThenElse)
        | ifThen        (ifThen)
        | whileExp      (whileExp)
        | forExp        (forExp)
        | BREAK         (A.BreakExp(BREAKleft))
        | letExp        (letExp)

(********************************************************)
(* Some useful functions for working with different     *)
(* sequences.                                           *)

paramListOpt:
        exp paramList                   (exp :: paramList)
        |                               (nil)
paramList:
        COMMA exp paramList             (exp :: paramList)
        |                               (nil)

fieldCreateOpt:
        ID EQ exp fieldCreateList       ((Symbol.symbol(ID), exp, IDleft) :: fieldCreateList)
        |                               (nil)
fieldCreateList:
        COMMA ID EQ exp fieldCreateList ((Symbol.symbol(ID), exp, IDleft) :: fieldCreateList)
        |                               (nil)

expListOpt:
        exp expList                     ((exp,expleft) :: expList)
        |                               (nil)
expList:
        SEMICOLON exp expList           ((exp,expleft) :: expList)
        |                               (nil)

decList:
        dec decList                     (dec :: decList)
        |                               (nil)

(*************************************************************)
(* A sequential expression is a sequence of 0 or more   *)
(* expressions enclosed in parentheses and sparated     *)
(* by semi-colons.                                      *)

seqExp:
        LPAREN expListOpt RPAREN      (A.SeqExp expListOpt)


(********************************************************)
(* The left-side of an assignment statemnt. Can come    *)
(* from a plain ID, the index of an array, or a field   *)
(* specifier, as in a struct.                           *)

(* doubt about positions*)

lValue: ID              (A.SimpleVar (Symbol.symbol ID, IDleft))
        | inter         (inter)
inter : subscript       (subscript)
        | fieldExp      (fieldExp)
        
subscript:
        ID LBRACK exp RBRACK        
                (A.SubscriptVar (A.SimpleVar(Symbol.symbol(ID), IDleft), exp, LBRACKleft))
        | inter LBRACK exp RBRACK
                (A.SubscriptVar (inter, exp, LBRACKleft))
fieldExp:
        lValue DOT ID
                (A.FieldVar (lValue, Symbol.symbol(ID), DOTleft))

(********************************************************)
(* A declaration can be for a type, a variable, or a    *)
(* function. We may expect 0 or more of these at a      *)
(* time.                                                *)

dec:
        typedec         (typedec)
        |vardec         (vardec)
        |fundec         (fundec)

typedec: TYPE ID EQ typ
                (A.TypeDec [{name = Symbol.symbol(ID),
                                ty = typ,
                                pos = TYPEleft}])
                (* doubt about positions*)

typ:    ID                      (A.NameTy (Symbol.symbol(ID), IDleft))
        | LBRACE typef RBRACE   (A.RecordTy typef)
        | ARRAY OF ID           (A.ArrayTy (Symbol.symbol(ID), ARRAYleft))

typef:
         ID COLON ID typeflist
            ( {name = Symbol.symbol(ID1),
                                        escape = ref true,
                                        typ = Symbol.symbol(ID2),
                                        pos = ID1left} :: typeflist)
        |   (nil)
typeflist:
         ID COLON ID COMMA typeflist
            ( {name = Symbol.symbol(ID1),
                                        escape = ref true,
                                        typ = Symbol.symbol(ID2),
                                        pos = ID1left} :: typeflist)
        |   (nil)

fundec:
      FUNCTION ID LPAREN typef RPAREN EQ exp
        (A.FunctionDec [{name = Symbol.symbol(ID),
                        params = typef,
                        result = NONE,
                        body = exp,
                        pos = FUNCTIONleft}])
    | FUNCTION ID LPAREN typef RPAREN COLON ID EQ exp
        (A.FunctionDec [{name = Symbol.symbol(ID1), params = typef,
                        result = SOME (Symbol.symbol(ID2), ID2left),
                        body = exp,
                        pos = FUNCTIONleft}])
        

vardec:
      VAR ID ASSIGN exp
                (A.VarDec {name = Symbol.symbol(ID),
                                escape = ref true,
                                typ = NONE,
                                init = exp,
                                pos = VARleft})
    | VAR ID COLON ID ASSIGN exp
                (A.VarDec {name = Symbol.symbol(ID1),
                                escape = ref true,
                                typ = SOME (Symbol.symbol(ID2), ID2left),
                                init = exp,
                                pos = VARleft})


callExp:
        ID LPAREN paramListOpt RPAREN
                (A.CallExp {func = Symbol.symbol(ID),
                                args = paramListOpt,
                                pos = IDright})

(********************************************************)
(* These are binary operators.                          *)
infixExp:
        exp PLUS exp            (A.OpExp{left = exp1, oper = A.PlusOp, right = exp2, pos = PLUSleft})
        | exp MINUS exp         (A.OpExp{left = exp1, oper = A.MinusOp, right = exp2, pos = MINUSleft})
        | exp TIMES exp         (A.OpExp{left = exp1, oper = A.TimesOp, right = exp2, pos = TIMESleft})
        | exp DIVIDE exp        (A.OpExp{left = exp1, oper = A.DivideOp, right = exp2, pos = DIVIDEleft})
        | exp EQ exp            (A.OpExp{left = exp1, oper = A.EqOp,     right = exp2, pos = EQleft})
        | exp NEQ exp           (A.OpExp{left = exp1, oper = A.NeqOp,    right = exp2, pos = NEQleft})
        | exp LT exp            (A.OpExp{left = exp1, oper = A.LtOp,     right = exp2, pos = LTleft})
        | exp LE exp            (A.OpExp{left = exp1, oper = A.LeOp,     right = exp2, pos = LEleft})
        | exp GT exp            (A.OpExp{left = exp1, oper = A.GtOp,     right = exp2, pos = GTleft})
        | exp GE exp            (A.OpExp{left = exp1, oper = A.GeOp,     right = exp2, pos = GEleft})
        | exp AND exp           (A.IfExp{test = exp1, then' = exp2,  else' = SOME (A.IntExp 0),    pos = ANDleft})
        | exp OR exp            (A.IfExp{test = exp1, then' = A.IntExp 1,     else' = SOME exp2, pos = ORleft})


recCreate:
        ID LBRACE fieldCreateOpt RBRACE
                (A.RecordExp {fields = fieldCreateOpt,
                                typ = Symbol.symbol(ID),
                                pos = IDleft})

arrCreate:
        ID LBRACK exp RBRACK OF exp
                (A.ArrayExp {typ = Symbol.symbol(ID),
                                size = exp1,
                                init = exp2,
                                pos = IDright})

assignment:
        lValue ASSIGN exp
                (A.AssignExp {var = lValue,
                                exp = exp,
                                pos = ASSIGNleft})


(********************************************************)
(* Branching instructions                               *)

ifThenElse:
        IF exp THEN exp ELSE exp
                (A.IfExp{test = exp1,
                                then' = exp2,
                                else' = SOME exp3,
                                pos = IFleft})

ifThen:
        IF exp THEN exp
                (A.IfExp{test = exp1,
                                then' = exp2,
                                else' = NONE,
                                pos = IFleft})

whileExp:
        WHILE exp DO exp
                (A.WhileExp{test = exp1,
                                body = exp2,
                                pos = WHILEleft})

forExp:
        FOR ID ASSIGN exp TO exp DO exp
                (A.ForExp{var=Symbol.symbol(ID), escape=ref true,
                        lo=exp1,
                        hi=exp2,
                        body=exp3,
                        pos=FORleft})

letExp:
        LET decList IN expListOpt END
                (A.LetExp {decs=decList, body=A.SeqExp expListOpt, pos=LETleft})
